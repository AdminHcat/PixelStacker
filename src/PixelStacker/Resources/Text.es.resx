<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Action_Add_0" xml:space="preserve">
    <value>Agregar '{0}'</value>
  </data>
  <data name="Action_DisableQuantizer" xml:space="preserve">
    <value>Deshabilitar cuantificador</value>
  </data>
  <data name="Action_EnableQuantizer" xml:space="preserve">
    <value>Habilitar cuantificador</value>
  </data>
  <data name="Action_Filter" xml:space="preserve">
    <value>Filtrar</value>
  </data>
  <data name="Action_Remove_0" xml:space="preserve">
    <value>Quitar "{0}"</value>
  </data>
  <data name="Action_Save" xml:space="preserve">
    <value>Salvar</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>¿Está seguro?</value>
  </data>
  <data name="DDL_SelectProfile" xml:space="preserve">
    <value>Seleccionar un perfil</value>
  </data>
  <data name="Error_GlassRequiredForMultiLayer" xml:space="preserve">
    <value>Debe habilitarse al menos un material de vidrio cuando elija requerir varias capas.</value>
  </data>
  <data name="Error_NeedMoreRam" xml:space="preserve">
    <value>No hay memoria suficiente. Vuelva a intentarlo o reduzca el tamaño de la imagen si el problema persiste.</value>
  </data>
  <data name="Error_NonGlassRequired" xml:space="preserve">
    <value>Debe seleccionarse al menos un material que no sea de vidrio.</value>
  </data>
  <data name="Error_OneMaterialRequired" xml:space="preserve">
    <value>Al menos un material debe estar habilitado en todo momento.</value>
  </data>
  <data name="Error_SomethingIsWrong" xml:space="preserve">
    <value>Algo está mal aquí.</value>
  </data>
  <data name="MaterialSelect_ColorProfile" xml:space="preserve">
    <value>Perfil de color</value>
  </data>
  <data name="MaterialSelect_IsMultiLayer" xml:space="preserve">
    <value>Habilitar la segunda capa</value>
  </data>
  <data name="MaterialSelect_IsMultiLayerRequired" xml:space="preserve">
    <value>Requiere segunda capa</value>
  </data>
  <data name="MaterialSelect_IsSideView" xml:space="preserve">
    <value>Vista lateral</value>
  </data>
  <data name="MaterialSelect_Title" xml:space="preserve">
    <value>Selección de material</value>
  </data>
  <data name="OtherOptions_ConfirmFactoryReset" xml:space="preserve">
    <value>¿Está seguro de que desea restablecer todas las opciones de PixelStacker a la configuración predeterminada? Incluye materiales, tamaños, estados de vista, opciones de renderizado, etc.</value>
  </data>
  <data name="OtherOptions_Title" xml:space="preserve">
    <value>Otras opciones</value>
  </data>
  <data name="PreRenderOptions_Algorithm" xml:space="preserve">
    <value>Algoritmo</value>
  </data>
  <data name="PreRenderOptions_Algorithm_Tooltip" xml:space="preserve">
    <value>Diferentes algoritmos utilizan diferentes estrategias para
combinando colores juntos. Algunos usan cubos de colores,
otros usan la distancia de ubicación a colores cercanos. Tratar
todos y decide cuál es tu favorito.</value>
  </data>
  <data name="PreRenderOptions_ColorCache" xml:space="preserve">
    <value>Caché de color</value>
  </data>
  <data name="PreRenderOptions_ColorCacheSize" xml:space="preserve">
    <value>Tamaño de caché de color</value>
  </data>
  <data name="PreRenderOptions_ColorCacheSize_Tooltip" xml:space="preserve">
    <value>Los valores más pequeños son más rápidos pero menos precisos.
Los valores más altos son más lentos pero más precisos.</value>
  </data>
  <data name="PreRenderOptions_ColorCount" xml:space="preserve">
    <value>Recuento de colores</value>
  </data>
  <data name="PreRenderOptions_ColorCount_Tooltip" xml:space="preserve">
    <value>Recuento máximo de colores.</value>
  </data>
  <data name="PreRenderOptions_Dither" xml:space="preserve">
    <value>Vacilar</value>
  </data>
  <data name="PreRenderOptions_Dither_Tooltip" xml:space="preserve">
    <value>A algunas personas les gusta vacilar.
Yo no. Yo nunca. odio
titubeando. Pero bueno, lo haces tú.</value>
  </data>
  <data name="PreRenderOptions_Parallel" xml:space="preserve">
    <value>Paralela</value>
  </data>
  <data name="PreRenderOptions_Parallel_Tooltip" xml:space="preserve">
    <value>Acelere el proceso de cuantificación tomando
ventaja de una CPU multinúcleo.

Valores más bajos = más estable
Valores más altos = más rápido
Valores súper altos = posibles fallas</value>
  </data>
  <data name="PreRenderOptions_QuantizerSettings" xml:space="preserve">
    <value>QuantizerSettings</value>
  </data>
  <data name="Progress_CompilingColorMap" xml:space="preserve">
    <value>Compilación de mapa de colores.</value>
  </data>
  <data name="Progress_Finished" xml:space="preserve">
    <value>Finalizado.</value>
  </data>
  <data name="Progress_PreparingCanvasForTextures" xml:space="preserve">
    <value>Preparando lienzo para pintar.</value>
  </data>
  <data name="Progress_QuantizingImage" xml:space="preserve">
    <value>Cuantizar imagen</value>
  </data>
</root>